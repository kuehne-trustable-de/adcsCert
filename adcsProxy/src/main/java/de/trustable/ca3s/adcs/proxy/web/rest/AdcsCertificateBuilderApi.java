/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.trustable.ca3s.adcs.proxy.web.rest;


import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import de.trustable.ca3s.adcs.proxy.web.dto.CertificateEnrollmentResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-20T18:27:31.111Z[GMT]")
@Api(value = "adcsCertificateBuilder", description = "the adcsCertificateBuilder API")
public interface AdcsCertificateBuilderApi {

    @ApiOperation(value = "request a certificate", nickname = "buildCertificate", notes = "build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature", response = CertificateEnrollmentResponse.class, authorizations = {
            @Authorization(value = "APIKeyHeader")
        }, tags={ "ADCSProxy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "new certificate created", response = CertificateEnrollmentResponse.class),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 401, message = "authentication / authorization missing, especially JWS invalid") })
    @RequestMapping(value = "/adcsCertificateBuilder",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CertificateEnrollmentResponse> buildCertificate(@ApiParam(value = "CSR and additional attributes (e.g. template) wrapped in a JWS"  )  @Valid @RequestBody JWSWrappedRequest body);

}
