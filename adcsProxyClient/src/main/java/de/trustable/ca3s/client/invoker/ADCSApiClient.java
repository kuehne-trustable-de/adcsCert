/*
 * ADCSConnector
 * baseline API to request and revoke certificates from an ADCS instance
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: kuehne@trustable.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.trustable.ca3s.client.invoker;

import okhttp3.OkHttpClient;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.GeneralSecurityException;
import java.security.SecureRandom;

public class ADCSApiClient extends ApiClient {


    private TrustManager[] trustManagers;

    /*
     * Constructor for ApiClient
     */
    public ADCSApiClient(TrustManager[] trustManagers) {

        super(initHttpClient(trustManagers));

        setTrustManagers(trustManagers);

        // Set default User-Agent.
        setUserAgent("ADCSProxyClient/1.0.0/java");

    }

    public TrustManager[] getTrustManagers() {
        return trustManagers;
    }

    /**
     * Configure trust manager to validate authorization in an SSL session.
     * Use null to reset to default.
     *
     * @param managers The TrustManagers to use
     * @return ApiClient
     */
    public ADCSApiClient setTrustManagers(TrustManager[] managers) {
        this.trustManagers = managers;
        return this;
    }

    
    
    /**
     * Apply SSL related settings to httpClient according to the current values of
     * verifyingSsl and sslCaCert.
     */
    static OkHttpClient initHttpClient(TrustManager[] trustManagers) {
        try {

            HostnameVerifier hostnameVerifier = null;

            OkHttpClient.Builder builder = new OkHttpClient.Builder();

            if (trustManagers != null) {
                SSLContext sslContext = SSLContext.getInstance("TLS");
                sslContext.init(null, trustManagers, new SecureRandom());
                builder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0]);
            }
            if( hostnameVerifier != null) {
                builder.hostnameVerifier(hostnameVerifier);
            }
            return builder.build();
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }
}
