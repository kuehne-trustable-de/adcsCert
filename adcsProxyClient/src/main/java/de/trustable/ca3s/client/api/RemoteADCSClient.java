/*
 * ADCSConnector
 * baseline API to request and revoce certificates from an ADCS instace
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: kuehne@trustable.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.trustable.ca3s.client.api;

import de.trustable.ca3s.client.invoker.ADCSApiClient;
import de.trustable.ca3s.client.invoker.ApiException;
import de.trustable.ca3s.client.invoker.ApiResponse;
import de.trustable.ca3s.client.invoker.Pair;
import de.trustable.ca3s.client.model.ADCSInstanceDetailsResponse;
import de.trustable.ca3s.client.model.CertificateEnrollmentResponse;
import de.trustable.ca3s.client.model.GetCertificateResponse;
import de.trustable.ca3s.client.model.JWSWrappedRequest;

import javax.net.ssl.TrustManager;
import javax.ws.rs.core.GenericType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class RemoteADCSClient {
    private ADCSApiClient apiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;



    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }


    public RemoteADCSClient(final String baseUrl) {
    	this(baseUrl, null, null);
    }

    public RemoteADCSClient(final String baseUrl, final String apiKey, TrustManager[] trustManagers) {
    	ADCSApiClient defaultClient = new ADCSApiClient(trustManagers);
    	defaultClient.setBasePath(baseUrl);
    	defaultClient.setApiKey(apiKey); 
        this.apiClient = defaultClient;
    }
    
    public ADCSApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ADCSApiClient apiClient) {
        this.apiClient = apiClient;
    }


    /**
     * request a certificate
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @return CertificateEnrollmentResponse
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 201 </td><td> new certificate created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    </table>
     */
    public CertificateEnrollmentResponse buildCertificate(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        return buildCertificateWithHttpInfo(jwSWrappedRequest).getData();
    }

    /**
     * request a certificate
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @return ApiResponse&lt;CertificateEnrollmentResponse&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 201 </td><td> new certificate created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<CertificateEnrollmentResponse> buildCertificateWithHttpInfo(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        Object localVarPostBody = jwSWrappedRequest;

        // verify the required parameter 'jwSWrappedRequest' is set
        if (jwSWrappedRequest == null) {
            throw new ApiException(400, "Missing the required parameter 'jwSWrappedRequest' when calling buildCertificate");
        }

        // create path and map variables
        String localVarPath = "/adcsCertificateBuilder";

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();






        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        GenericType<CertificateEnrollmentResponse> localVarReturnType = new GenericType<CertificateEnrollmentResponse>() {};

        return apiClient.invokeAPI("AdcsCertificateBuilderApi.buildCertificate", localVarPath, "POST", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, localVarReturnType, false);
    }


    /**
     * revoke a certificate
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 204 </td><td> certificate revoked </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> certificate already revoked </td><td>  -  </td></tr>
    </table>
     */
    public void revokeCertificate(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        revokeCertificateWithHttpInfo(jwSWrappedRequest);
    }

    /**
     * revoke a certificate
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 204 </td><td> certificate revoked </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> certificate already revoked </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Void> revokeCertificateWithHttpInfo(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        Object localVarPostBody = jwSWrappedRequest;

        // verify the required parameter 'jwSWrappedRequest' is set
        if (jwSWrappedRequest == null) {
            throw new ApiException(400, "Missing the required parameter 'jwSWrappedRequest' when calling revokeCertificate");
        }

        // create path and map variables
        String localVarPath = "/adcsCertificateRevoker";

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        return apiClient.invokeAPI("AdcsCertificateRevokerApi.revokeCertificate", localVarPath, "POST", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, null, false);
    }


    /**
     * get description of ADCS instance
     * get description of ADCS instance
     * @return String
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> ADCS info </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public String getADCSInfo() throws ApiException {
        return getADCSInfoWithHttpInfo().getData();
    }

    /**
     * get description of ADCS instance
     * get description of ADCS instance
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> ADCS info </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<String> getADCSInfoWithHttpInfo() throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsInfo";

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();





        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        GenericType<String> localVarReturnType = new GenericType<String>() {};

        return apiClient.invokeAPI("AdcsInfoApi.getADCSInfo", localVarPath, "GET", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, localVarReturnType, false);
    }
    /**
     * get the details describing this ADCS instance
     * get the some details like version, type, signing certificate chain, and templates configured of this ADCS instance
     * @return ADCSInstanceDetailsResponse
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Details regarding this ADCS instance </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ADCSInstanceDetailsResponse getCAInstanceDetails() throws ApiException {
        return getCAInstanceDetailsWithHttpInfo().getData();
    }

    /**
     * get the details describing this ADCS instance
     * get the some details like version, type, signing certificate chain, and templates configured of this ADCS instance
     * @return ApiResponse&lt;ADCSInstanceDetailsResponse&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Details regarding this ADCS instance </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<ADCSInstanceDetailsResponse> getCAInstanceDetailsWithHttpInfo() throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsInstanceDetails";

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();





        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        GenericType<ADCSInstanceDetailsResponse> localVarReturnType = new GenericType<ADCSInstanceDetailsResponse>() {};

        return apiClient.invokeAPI("AdcsInfoApi.getCAInstanceDetails", localVarPath, "GET", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, localVarReturnType, false);
    }
    /**
     * get the templates available at this ADCS instance
     * get the templates available at this ADCS instance
     * @return List&lt;String&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Array of template names </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public List<String> getCATemplates() throws ApiException {
        return getCATemplatesWithHttpInfo().getData();
    }

    /**
     * get the templates available at this ADCS instance
     * get the templates available at this ADCS instance
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Array of template names </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> getCATemplatesWithHttpInfo() throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsTemplates";

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();





        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        GenericType<List<String>> localVarReturnType = new GenericType<List<String>>() {};

        return apiClient.invokeAPI("AdcsInfoApi.getCATemplates", localVarPath, "GET", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, localVarReturnType, false);
    }

    /**
     * get details of a certificate request identified by its Id
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @return GetCertificateResponse
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id found </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> no existing item for the given id </td><td>  -  </td></tr>
    </table>
     */
    public GetCertificateResponse getRequestById(String reqId) throws ApiException {
        return getRequestByIdWithHttpInfo(reqId).getData();
    }

    /**
     * get details of a certificate request identified by its Id
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @return ApiResponse&lt;GetCertificateResponse&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id found </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> no existing item for the given id </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<GetCertificateResponse> getRequestByIdWithHttpInfo(String reqId) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'reqId' is set
        if (reqId == null) {
            throw new ApiException(400, "Missing the required parameter 'reqId' when calling getRequestById");
        }

        // create path and map variables
        String localVarPath = "/adcsRequest/{reqId}"
                .replaceAll("\\{" + "reqId" + "\\}", apiClient.escapeString(reqId.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();





        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        GenericType<GetCertificateResponse> localVarReturnType = new GenericType<GetCertificateResponse>() {};

        return apiClient.invokeAPI("AdcsRequestApi.getRequestById", localVarPath, "GET", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, localVarReturnType, false);
    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param limit The numbers of items to return (optional)
     * @return List&lt;String&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id list created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> an item already exists </td><td>  -  </td></tr>
    </table>
     */
    public List<String> getRequestIdList(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit) throws ApiException {
        return getRequestIdListWithHttpInfo(offset, resolvedWhenTimestamp, revokedWhenTimestamp, limit).getData();
    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param limit The numbers of items to return (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException if fails to make API call
     * 
    <table><caption>Result</caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id list created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> an item already exists </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> getRequestIdListWithHttpInfo(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsRequests/Ids";

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resolvedWhenTimestamp", resolvedWhenTimestamp));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "revokedWhenTimestamp", revokedWhenTimestamp));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));




        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        GenericType<List<String>> localVarReturnType = new GenericType<List<String>>() {};

        return apiClient.invokeAPI("AdcsRequestsApi.getRequestIdList", localVarPath, "GET", localVarQueryParams, localVarPostBody,
                localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                localVarAuthNames, localVarReturnType, false);
    }


}