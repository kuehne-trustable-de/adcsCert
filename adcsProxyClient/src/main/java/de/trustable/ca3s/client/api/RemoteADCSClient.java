/*
 * ADCSConnector
 * baseline API to request and revoce certificates from an ADCS instace
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: kuehne@trustable.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.trustable.ca3s.client.api;

import com.google.gson.reflect.TypeToken;
import de.trustable.ca3s.client.invoker.*;
import de.trustable.ca3s.client.model.ADCSInstanceDetailsResponse;
import de.trustable.ca3s.client.model.CertificateEnrollmentResponse;
import de.trustable.ca3s.client.model.GetCertificateResponse;
import de.trustable.ca3s.client.model.JWSWrappedRequest;

import javax.net.ssl.TrustManager;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class RemoteADCSClient {
    private ADCSApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;



    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }


    public RemoteADCSClient(final String baseUrl) {
    	this(baseUrl, null, null);
    }

    public RemoteADCSClient(final String baseUrl, final String apiKey, TrustManager[] trustManagers) {
    	ADCSApiClient defaultClient = new ADCSApiClient(trustManagers);
    	defaultClient.setBasePath(baseUrl);
    	defaultClient.setApiKey(apiKey); 
        this.localVarApiClient = defaultClient;
    }
    
    public ADCSApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ADCSApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }


    /**
     * Build call for buildCertificate
     * @param jwSWrappedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 201 </td><td> new certificate created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call buildCertificateCall(JWSWrappedRequest jwSWrappedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jwSWrappedRequest;

        // create path and map variables
        String localVarPath = "/adcsCertificateBuilder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildCertificateValidateBeforeCall(JWSWrappedRequest jwSWrappedRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'jwSWrappedRequest' is set
        if (jwSWrappedRequest == null) {
            throw new ApiException("Missing the required parameter 'jwSWrappedRequest' when calling buildCertificate(Async)");
        }


        okhttp3.Call localVarCall = buildCertificateCall(jwSWrappedRequest, _callback);
        return localVarCall;

    }

    /**
     * request a certificate
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @return CertificateEnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 201 </td><td> new certificate created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    </table>
     */
    public CertificateEnrollmentResponse buildCertificate(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        ApiResponse<CertificateEnrollmentResponse> localVarResp = buildCertificateWithHttpInfo(jwSWrappedRequest);
        return localVarResp.getData();
    }

    /**
     * request a certificate
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @return ApiResponse&lt;CertificateEnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 201 </td><td> new certificate created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<CertificateEnrollmentResponse> buildCertificateWithHttpInfo(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        okhttp3.Call localVarCall = buildCertificateValidateBeforeCall(jwSWrappedRequest, null);
        Type localVarReturnType = new TypeToken<CertificateEnrollmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request a certificate (asynchronously)
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 201 </td><td> new certificate created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call buildCertificateAsync(JWSWrappedRequest jwSWrappedRequest, final ApiCallback<CertificateEnrollmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildCertificateValidateBeforeCall(jwSWrappedRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateEnrollmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for revokeCertificate
     * @param jwSWrappedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 204 </td><td> certificate revoked </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> certificate already revoked </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call revokeCertificateCall(JWSWrappedRequest jwSWrappedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jwSWrappedRequest;

        // create path and map variables
        String localVarPath = "/adcsCertificateRevoker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCertificateValidateBeforeCall(JWSWrappedRequest jwSWrappedRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'jwSWrappedRequest' is set
        if (jwSWrappedRequest == null) {
            throw new ApiException("Missing the required parameter 'jwSWrappedRequest' when calling revokeCertificate(Async)");
        }


        okhttp3.Call localVarCall = revokeCertificateCall(jwSWrappedRequest, _callback);
        return localVarCall;

    }

    /**
     * revoke a certificate
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 204 </td><td> certificate revoked </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> certificate already revoked </td><td>  -  </td></tr>
    </table>
     */
    public void revokeCertificate(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        revokeCertificateWithHttpInfo(jwSWrappedRequest);
    }

    /**
     * revoke a certificate
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 204 </td><td> certificate revoked </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> certificate already revoked </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Void> revokeCertificateWithHttpInfo(JWSWrappedRequest jwSWrappedRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(jwSWrappedRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * revoke a certificate (asynchronously)
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param jwSWrappedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 204 </td><td> certificate revoked </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing, especially JWS invalid </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> certificate already revoked </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call revokeCertificateAsync(JWSWrappedRequest jwSWrappedRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(jwSWrappedRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getADCSInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> ADCS info </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getADCSInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getADCSInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getADCSInfoCall(_callback);
        return localVarCall;

    }

    /**
     * get description of ADCS instance
     * get description of ADCS instance
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> ADCS info </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public String getADCSInfo() throws ApiException {
        ApiResponse<String> localVarResp = getADCSInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * get description of ADCS instance
     * get description of ADCS instance
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> ADCS info </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<String> getADCSInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getADCSInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get description of ADCS instance (asynchronously)
     * get description of ADCS instance
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> ADCS info </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getADCSInfoAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getADCSInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCAInstanceDetails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Details regarding this ADCS instance </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCAInstanceDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsInstanceDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCAInstanceDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getCAInstanceDetailsCall(_callback);
        return localVarCall;

    }

    /**
     * get the details describing this ADCS instance
     * get the some details like version, type, signing certificate chain, and templates configured of this ADCS instance
     * @return ADCSInstanceDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Details regarding this ADCS instance </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ADCSInstanceDetailsResponse getCAInstanceDetails() throws ApiException {
        ApiResponse<ADCSInstanceDetailsResponse> localVarResp = getCAInstanceDetailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * get the details describing this ADCS instance
     * get the some details like version, type, signing certificate chain, and templates configured of this ADCS instance
     * @return ApiResponse&lt;ADCSInstanceDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Details regarding this ADCS instance </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<ADCSInstanceDetailsResponse> getCAInstanceDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCAInstanceDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ADCSInstanceDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the details describing this ADCS instance (asynchronously)
     * get the some details like version, type, signing certificate chain, and templates configured of this ADCS instance
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Details regarding this ADCS instance </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCAInstanceDetailsAsync(final ApiCallback<ADCSInstanceDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCAInstanceDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ADCSInstanceDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCATemplates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Array of template names </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCATemplatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCATemplatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getCATemplatesCall(_callback);
        return localVarCall;

    }

    /**
     * get the templates available at this ADCS instance
     * get the templates available at this ADCS instance
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Array of template names </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public List<String> getCATemplates() throws ApiException {
        ApiResponse<List<String>> localVarResp = getCATemplatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * get the templates available at this ADCS instance
     * get the templates available at this ADCS instance
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Array of template names </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> getCATemplatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCATemplatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the templates available at this ADCS instance (asynchronously)
     * get the templates available at this ADCS instance
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> Array of template names </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 503 </td><td> ADCS server unavailable </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCATemplatesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCATemplatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getRequestById
     * @param reqId certificate request id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id found </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> no existing item for the given id </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getRequestByIdCall(String reqId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsRequest/{reqId}"
                .replaceAll("\\{" + "reqId" + "\\}", localVarApiClient.escapeString(reqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestByIdValidateBeforeCall(String reqId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'reqId' is set
        if (reqId == null) {
            throw new ApiException("Missing the required parameter 'reqId' when calling getRequestById(Async)");
        }


        okhttp3.Call localVarCall = getRequestByIdCall(reqId, _callback);
        return localVarCall;

    }

    /**
     * get details of a certificate request identified by its Id
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @return GetCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id found </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> no existing item for the given id </td><td>  -  </td></tr>
    </table>
     */
    public GetCertificateResponse getRequestById(String reqId) throws ApiException {
        ApiResponse<GetCertificateResponse> localVarResp = getRequestByIdWithHttpInfo(reqId);
        return localVarResp.getData();
    }

    /**
     * get details of a certificate request identified by its Id
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @return ApiResponse&lt;GetCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id found </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> no existing item for the given id </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<GetCertificateResponse> getRequestByIdWithHttpInfo(String reqId) throws ApiException {
        okhttp3.Call localVarCall = getRequestByIdValidateBeforeCall(reqId, null);
        Type localVarReturnType = new TypeToken<GetCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get details of a certificate request identified by its Id (asynchronously)
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id found </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 404 </td><td> no existing item for the given id </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getRequestByIdAsync(String reqId, final ApiCallback<GetCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestByIdValidateBeforeCall(reqId, _callback);
        Type localVarReturnType = new TypeToken<GetCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getRequestIdList
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param limit The numbers of items to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id list created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> an item already exists </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getRequestIdListCall(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsRequests/Ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (resolvedWhenTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolvedWhenTimestamp", resolvedWhenTimestamp));
        }

        if (revokedWhenTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revokedWhenTimestamp", revokedWhenTimestamp));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestIdListValidateBeforeCall(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getRequestIdListCall(offset, resolvedWhenTimestamp, revokedWhenTimestamp, limit, _callback);
        return localVarCall;

    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param limit The numbers of items to return (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id list created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> an item already exists </td><td>  -  </td></tr>
    </table>
     */
    public List<String> getRequestIdList(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit) throws ApiException {
        ApiResponse<List<String>> localVarResp = getRequestIdListWithHttpInfo(offset, resolvedWhenTimestamp, revokedWhenTimestamp, limit);
        return localVarResp.getData();
    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param limit The numbers of items to return (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id list created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> an item already exists </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> getRequestIdListWithHttpInfo(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRequestIdListValidateBeforeCall(offset, resolvedWhenTimestamp, revokedWhenTimestamp, limit, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the list certificate request IDs (asynchronously)
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param limit The numbers of items to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * <p>http.response.details</p>
    <table border="1"><caption>Response Details </caption>
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> request id list created </td><td>  -  </td></tr>
    <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
    <tr><td> 401 </td><td> authentication / authorization missing </td><td>  -  </td></tr>
    <tr><td> 409 </td><td> an item already exists </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getRequestIdListAsync(Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, Integer limit, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestIdListValidateBeforeCall(offset, resolvedWhenTimestamp, revokedWhenTimestamp, limit, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }










}