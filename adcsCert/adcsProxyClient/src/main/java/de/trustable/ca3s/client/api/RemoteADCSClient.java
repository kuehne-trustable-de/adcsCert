/*
 * ADCSConnector
 * baseline API to request and revoce certificates from an ADCS instace
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: kuehne@trustable.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.trustable.ca3s.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import de.trustable.ca3s.client.model.CertificateEnrollmentResponse;
import de.trustable.ca3s.client.model.GetCertificateResponse;
import de.trustable.ca3s.client.model.JWSWrappedRequest;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

public class RemoteADCSClient {
    private ADCSApiClient apiClient;

    public RemoteADCSClient(final String baseUrl) {
    	this(baseUrl, null);
    }
    
    public RemoteADCSClient(final String baseUrl, final String apiKey) {
    	ADCSApiClient defaultClient = new ADCSApiClient();
    	defaultClient.setBasePath(baseUrl);
    	defaultClient.setApiKey(apiKey); 
        this.apiClient = defaultClient;
    }
    
    public ADCSApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ADCSApiClient apiClient) {
        this.apiClient = apiClient;
    }


    /**
     * Build call for buildCertificate
     * @param body CSR and additional attributes (e.g. template) wrapped in a JWS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateCall(JWSWrappedRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/adcsCertificateBuilder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }


    private com.squareup.okhttp.Call buildCertificateValidateBeforeCall(JWSWrappedRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = buildCertificateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * request a certificate
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param body CSR and additional attributes (e.g. template) wrapped in a JWS (optional)
     * @return CertificateEnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateEnrollmentResponse buildCertificate(JWSWrappedRequest body) throws ApiException {
        ApiResponse<CertificateEnrollmentResponse> resp = buildCertificateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * request a certificate
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param body CSR and additional attributes (e.g. template) wrapped in a JWS (optional)
     * @return ApiResponse&lt;CertificateEnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateEnrollmentResponse> buildCertificateWithHttpInfo(JWSWrappedRequest body) throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CertificateEnrollmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * request a certificate (asynchronously)
     * build a certificate using the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param body CSR and additional attributes (e.g. template) wrapped in a JWS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateAsync(JWSWrappedRequest body, final ApiCallback<CertificateEnrollmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateEnrollmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getADCSInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getADCSInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }


    private com.squareup.okhttp.Call getADCSInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getADCSInfoCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * get description of ADCS instance
     * get description of ADCS instance
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getADCSInfo() throws ApiException {
        ApiResponse<String> resp = getADCSInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * get description of ADCS instance
     * get description of ADCS instance
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getADCSInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getADCSInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get description of ADCS instance (asynchronously)
     * get description of ADCS instance
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getADCSInfoAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getADCSInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getADCSInfo1
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getADCSInfo1Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getADCSInfo1ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getADCSInfo1Call(progressListener, progressRequestListener);
        return call;

    }

    /**
     * get the templates available at this ADCS instance
     * get the templates available at this ADCS instance
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getADCSInfo1() throws ApiException {
        ApiResponse<List<String>> resp = getADCSInfo1WithHttpInfo();
        return resp.getData();
    }

    /**
     * get the templates available at this ADCS instance
     * get the templates available at this ADCS instance
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getADCSInfo1WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getADCSInfo1ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the templates available at this ADCS instance (asynchronously)
     * get the templates available at this ADCS instance
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getADCSInfo1Async(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getADCSInfo1ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRequestById
     * @param reqId certificate request id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRequestByIdCall(String reqId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsRequest/{reqId}"
            .replaceAll("\\{" + "reqId" + "\\}", apiClient.escapeString(reqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getRequestByIdValidateBeforeCall(String reqId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reqId' is set
        if (reqId == null) {
            throw new ApiException("Missing the required parameter 'reqId' when calling getRequestById(Async)");
        }
        

        com.squareup.okhttp.Call call = getRequestByIdCall(reqId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get details of a certificate request identified by its Id
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @return GetCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCertificateResponse getRequestById(String reqId) throws ApiException {
        ApiResponse<GetCertificateResponse> resp = getRequestByIdWithHttpInfo(reqId);
        return resp.getData();
    }

    /**
     * get details of a certificate request identified by its Id
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @return ApiResponse&lt;GetCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCertificateResponse> getRequestByIdWithHttpInfo(String reqId) throws ApiException {
        com.squareup.okhttp.Call call = getRequestByIdValidateBeforeCall(reqId, null, null);
        Type localVarReturnType = new TypeToken<GetCertificateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get details of a certificate request identified by its Id (asynchronously)
     * details of a certificate request identified by its Id
     * @param reqId certificate request id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRequestByIdAsync(String reqId, final ApiCallback<GetCertificateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRequestByIdValidateBeforeCall(reqId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCertificateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRequestIdList
     * @param limit The numbers of items to return (optional)
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRequestIdListCall(Integer limit, Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adcsRequests/Ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (resolvedWhenTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolvedWhenTimestamp", resolvedWhenTimestamp));
        if (revokedWhenTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revokedWhenTimestamp", revokedWhenTimestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getRequestIdListValidateBeforeCall(Integer limit, Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRequestIdListCall(limit, offset, resolvedWhenTimestamp, revokedWhenTimestamp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) available the ADCS
     * @param limit The numbers of items to return (optional)
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getRequestIdList(Integer limit, Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp) throws ApiException {
        ApiResponse<List<String>> resp = getRequestIdListWithHttpInfo(limit, offset, resolvedWhenTimestamp, revokedWhenTimestamp);
        return resp.getData();
    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) available the ADCS
     * @param limit The numbers of items to return (optional)
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getRequestIdList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<String>> resp = getRequestIdListWithHttpInfo(limit, offset, null, null);
        return resp.getData();
    }

    /**
     * get the list certificate request IDs resolved after a given instant
     * enumerate all the request (issued or pending) available the ADCS
     * @param limit The numbers of items to return (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getRequestIdListResolvedAfter(Integer limit, Long resolvedWhenTimestamp) throws ApiException {
        ApiResponse<List<String>> resp = getRequestIdListWithHttpInfo(limit, null, resolvedWhenTimestamp, null);
        return resp.getData();
    }

    /**
     * get the list certificate request IDs revoked after a given instant
     * enumerate all the request (issued or pending) available the ADCS
     * @param limit The numbers of items to return (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getRequestIdListRevokedAfter(Integer limit, Long revokedWhenTimestamp) throws ApiException {
        ApiResponse<List<String>> resp = getRequestIdListWithHttpInfo(limit, null, null, revokedWhenTimestamp);
        return resp.getData();
    }

    /**
     * get the list certificate request IDs
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param limit The numbers of items to return (optional)
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getRequestIdListWithHttpInfo(Integer limit, Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp) throws ApiException {
        com.squareup.okhttp.Call call = getRequestIdListValidateBeforeCall(limit, offset, resolvedWhenTimestamp, revokedWhenTimestamp, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the list certificate request IDs (asynchronously)
     * enumerate all the request (issued or pending) avialable the ADCS
     * @param limit The numbers of items to return (optional)
     * @param offset The number of items to skip before starting to collect the result set. Either provide this parameter or resolvedWhenTimestamp or revokedWhenTimestamp. (optional)
     * @param resolvedWhenTimestamp The resolvedWhen value must be after this timestamp value. Either provide this parameter or offset or revokedWhenTimestamp. (optional)
     * @param revokedWhenTimestamp The revokedWhen value must be after this timestamp value. Either provide this parameter or resolvedWhenTimestamp or offset. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRequestIdListAsync(Integer limit, Integer offset, Long resolvedWhenTimestamp, Long revokedWhenTimestamp, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRequestIdListValidateBeforeCall(limit, offset, resolvedWhenTimestamp, revokedWhenTimestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revokeCertificate
     * @param body serial, reason and revocation date wrapped in a JWS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revokeCertificateCall(JWSWrappedRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/adcsCertificateRevoker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call revokeCertificateValidateBeforeCall(JWSWrappedRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = revokeCertificateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * revoke a certificate
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param body serial, reason and revocation date wrapped in a JWS (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void revokeCertificate(JWSWrappedRequest body) throws ApiException {
        revokeCertificateWithHttpInfo(body);
    }

    /**
     * revoke a certificate
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param body serial, reason and revocation date wrapped in a JWS (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> revokeCertificateWithHttpInfo(JWSWrappedRequest body) throws ApiException {
        com.squareup.okhttp.Call call = revokeCertificateValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * revoke a certificate (asynchronously)
     * revoke a certificate issued by the local ADCS. The request parameter are wrapped into Javascript Web Signature
     * @param body serial, reason and revocation date wrapped in a JWS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revokeCertificateAsync(JWSWrappedRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revokeCertificateValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}